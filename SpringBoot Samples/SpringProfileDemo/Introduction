In this tutorial, we are going to focus on Spring Boot Profiling Feature.
Spring Boot gives developers flexibility to choose which properties to use at each particular stages of the development.
By default, Spring Boot will load application.properties but this can be customised to load developer-specific properties.

Advantage:
- useful when mostly when we have multiple database source at different stages (e.g. Dev, Test, Prod) of the development

Using the previous example with little tweaking it a little bit
Tasks:
- New class will be created to output values of the chosen properties
- Create extra properties aside default application properties under src/main/resources dir
- Create new resource in controller e.g. /datasource
- Test the sample

****** Run Below command in terminal **************
mvn spring-boot:run

NOTE ==>> The rest of the previous example will remain same
basic CRUD operations in Spring Boot.
Create : Adding objects to Collection
Read : Outputting the collection content
Update : Changing 1 or 2 values in a Collection
Delete : Removing item from Collection

For this brevity, Map will be used to emulate Database-like functions

Sample Data Format on Postman

{
    "id":5,
    "feedTitle":"Spring Boot",
    "feedContent":"CRUD Ops in Spring Boot",
    "feedDateTime":"2020-08-23T16:49:52.995"
}

{
    "id" : 10,
    "feedTitle" : "GCP",
    "feedContent" : "GCP Infrastructure Fundamental Core Services",
    "feedDateTime" : "2020-08-23T15:04:52.995"
}